# -*- coding: utf-8 -*-

# Игра «Быки и коровы»
# https://goo.gl/Go2mb9
#
# Правила:
# Компьютер загадывает четырехзначное число, все цифры которого различны
# (первая цифра числа отлична от нуля). Игроку необходимо разгадать задуманное число.
# Игрок вводит четырехзначное число c неповторяющимися цифрами,
# компьютер сообщают о количестве «быков» и «коров» в названном числе
# «бык» — цифра есть в записи задуманного числа и стоит в той же позиции,
#       что и в задуманном числе
# «корова» — цифра есть в записи задуманного числа, но не стоит в той же позиции,
#       что и в задуманном числе
#
# Например, если задумано число 3275 и названо число 1234,
# получаем в названном числе одного «быка» и одну «корову».
# Очевидно, что число отгадано в том случае, если имеем 4 «быка».
#
# Формат ответа компьютера
# > быки - 1, коровы - 1


# Составить отдельный модуль mastermind_engine, реализующий функциональность игры.
# В mastermind_engine нужно реализовать функции:
#   загадать_число()
#   проверить_число(NN) - возвращает словарь {'bulls': N, 'cows': N}
# Загаданное число хранить в глобальной переменной.
# Обратите внимание, что строки - это список символов.
#
# В текущем модуле (lesson_006/01_mastermind.py) реализовать логику работы с пользователем:
#   модуль движка загадывает число
#   в цикле, пока число не отгадано
#       у пользователя запрашивается вариант числа
#       проверяем что пользователь ввел допустимое число (4 цифры, все цифры разные, не начинается с 0)
#       модуль движка проверяет число и выдает быков/коров
#       результат быков/коров выводится на консоль
#  когда игрок угадал таки число - показать количество ходов и вопрос "Хотите еще партию?"
#
# При написании кода учитывайте, что движок игры никак не должен взаимодействовать с пользователем.
# Все общение с пользователем (вывод на консоль и запрос ввода от пользователя) делать в 01_mastermind.py.
# Движок игры реализует только саму функциональность игры. Разделяем: mastermind_engine работает
# только с загаданным числом, а 01_mastermind - с пользователем и просто передает числа на проверку движку.
# Это пример применения SOLID принципа (см https://goo.gl/GFMoaI) в архитектуре программ.
# Точнее, в этом случае важен принцип единственной ответственности - https://goo.gl/rYb3hT

from termcolor import cprint
from mastermind_engine import pick_secret_number, check_secret_number, check_user_number

user_number = ""
secret_number = pick_secret_number()
user_turn = 0
bulls_and_cows = [0, 0]

cprint('Я загадал 4-значное число (первая цифра не ноль, все цифры уникальны).', color='green')
cprint('Попробуешь угадать?', color='green')

while not bulls_and_cows[0] == 4:
    user_turn += 1
    # TODO вынесем эту часть в отдельную функцию выше, is False не пишут, используйте приставку not перед условием
    while check_user_number(user_number) is False:
        user_number = input('Попытка №{0}: '.format(user_turn))
    bulls_and_cows = check_secret_number(user_number)
    cprint('Быков: {0}, коров: {1}'.format(*bulls_and_cows), color='yellow')
    user_number = ""
else:
    cprint('Побeда! Ходов сделано: {0}.'.format(user_turn), color='magenta')

# TODO попробуйте написать функцию которая будет спрашивать у пользователя хочет ли он еще поиграть и онтегрировать ее
# TODO в код

# TODO Главный цикл должен будет выглядеть так примерно

# TODO просим_ввести_число_корректное() - функция
# TODO получаем данные из функции, которая чекает число на результат и возвращает словарь
# TODO печатаем этот результат, тут тоже вызов функции() и запись в переменную
# TODO увеличиваем число ходов - тут простой счетчик
# TODO условие на победу и новую иру в виде двух функций:
# TODO Если выиграли_игру(): - функция
# TODO    новая_игра() - функция
