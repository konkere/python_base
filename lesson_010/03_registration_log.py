# -*- coding: utf-8 -*-

# –ï—Å—Ç—å —Ñ–∞–π–ª —Å –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å–∞–π—Ç–µ - registrations.txt
# –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç: –ò–ú–Ø –ï–ú–ï–ô–õ –í–û–ó–†–ê–°–¢, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–∞–º–∏
# –ù–∞–ø—Ä–∏–º–µ—Ä:
# –í–∞—Å–∏–ª–∏–π test@test.ru 27
#
# –ù–∞–¥–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞, –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏:
# - –ø—Ä–∏—Å—É—Ç—Å–≤—É—é—Ç –≤—Å–µ —Ç—Ä–∏ –ø–æ–ª—è
# - –ø–æ–ª–µ –∏–º–µ–Ω–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã
# - –ø–æ–ª–µ –µ–º–µ–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç @ –∏ .
# - –ø–æ–ª–µ –≤–æ–∑—Ä–∞—Å—Ç —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º –æ—Ç 10 –¥–æ 99
#
# –í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω—É–∂–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –¥–≤–∞ —Ñ–∞–π–ª–∞
# - registrations_good.log –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å—Ç—Ä–æ–∫–∏ –∫–∞–∫ –µ—Å—Ç—å
# - registrations_bad.log –¥–ª—è –æ—à–∏–±–æ—á–Ω—ã—Ö, –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É –∏ –≤–∏–¥ –æ—à–∏–±–∫–∏.
#
# –î–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –≤—ã–∫–∏–¥—ã–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏—è:
# - –ù–ï –ø—Ä–∏—Å—É—Ç—Å–≤—É—é—Ç –≤—Å–µ —Ç—Ä–∏ –ø–æ–ª—è: ValueError
# - –ø–æ–ª–µ –∏–º–µ–Ω–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –ù–ï —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã: NotNameError (–∫–∞—Å—Ç–æ–º–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ)
# - –ø–æ–ª–µ –µ–º–µ–π–ª –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç @ –∏ .(—Ç–æ—á–∫—É): NotEmailError (–∫–∞—Å—Ç–æ–º–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ)
# - –ø–æ–ª–µ –≤–æ–∑—Ä–∞—Å—Ç –ù–ï —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º –æ—Ç 10 –¥–æ 99: ValueError
# –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –æ–±–µ—Ä–Ω—É—Ç—å –≤ try-except.


class NotNameError(Exception):

    def __init__(self):
        self.message = '–ü–æ–ª–µ –∏–º–µ–Ω–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –ù–ï —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã'

    def __str__(self):
        return self.message


class NotEmailError(Exception):

    def __init__(self):
        self.message = '–ø–æ–ª–µ –µ–º–µ–π–ª –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç "@" –∏ "."(—Ç–æ—á–∫—É)'

    def __str__(self):
        return self.message


class RegsParser:

    def __init__(self, file_in):
        self.file_in = file_in
        self.file_regs_good = 'registrations_good.log'
        self.file_regs_bad = 'registrations_bad.log'
        open(self.file_regs_good, mode='w+').close()
        open(self.file_regs_bad, mode='w+').close()
        self.parse_file()

    def parse_file(self):
        with open(self.file_in, 'r', encoding='utf8') as file:
            for line in file:
                line = line[:-1]
                self.parse_line(line)

    def parse_line(self, line):
        try:
            name, email, age = self.check_fields_exist(line)
            self.check_name(name)
            self.check_email(email)
            self.check_age(age)
        except (ValueError, NotNameError, NotEmailError) as exc:
            self.write_bad(line, exc)
        else:
            self.write_good(line)

    def check_fields_exist(self, line):
        name, email, age = line.split(' ')
        return name, email, age

    def check_name(self, name):
        if not name.isalpha():
            raise NotNameError

    def check_email(self, email):
        exist_dot = False
        exist_at = False
        for char in email:
            if char == '.':
                exist_dot = True
            if char == '@':
                exist_at = True
        if not (exist_dot and exist_at):
            raise NotEmailError

    def check_age(self, age):
        if not (age.isdigit() and (9 < int(age) < 100)):
            raise ValueError('–ü–æ–ª–µ –≤–æ–∑—Ä–∞—Å—Ç –ù–ï —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º –æ—Ç 10 –¥–æ 99')

    def write_good(self, line):
        with open(self.file_regs_good, mode='a') as file:
            line = f'{line}\n'
            file.write(line)

    def write_bad(self, line, error):
        with open(self.file_regs_bad, mode='a') as file:
            line_error = f'{line} ü†ñ {error}\n'
            file.write(line_error)


RegsParser('registrations.txt')
